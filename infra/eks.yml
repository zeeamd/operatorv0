AWSTemplateFormatVersion: '2010-09-09'
Description: Create a public EKS cluster with one worker node, shared security group, core add-ons, and IAM user access

Parameters:
  ClusterName:
    Type: String
    Default: v0
    Description: Name of the EKS cluster

  VpcId:
    Type: String
    Default: vpc-b9f333c4
    Description: VPC ID for the EKS cluster

  VpcCidr:
    Type: String
    Default: 172.31.0.0/16
    Description: CIDR block of the VPC

  SubnetIds:
    Type: List<String>
    Default: subnet-b5e35194,subnet-640e4929
    Description: Comma-separated list of subnet IDs for the EKS cluster

  PrincipalArn:
    Type: String
    Default: arn:aws:iam::xAIDx:user/Syedzeeshan.Ahmed@ct.com
    Description: User ARN

Resources:
  EKSSharedSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow all traffic for EKS cluster and node group
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0

  EKSClusterRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: eks.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonEKSClusterPolicy
        - arn:aws:iam::aws:policy/AmazonEKSServicePolicy

  EKSCluster:
    Type: AWS::EKS::Cluster
    Properties:
      Name: !Ref ClusterName
      RoleArn: !GetAtt EKSClusterRole.Arn
      ResourcesVpcConfig:
        SubnetIds: !Ref SubnetIds
        SecurityGroupIds:
          - !Ref EKSSharedSecurityGroup
        EndpointPublicAccess: true
        EndpointPrivateAccess: true
      AccessConfig:
        AuthenticationMode: API_AND_CONFIG_MAP

  NodeInstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy
        - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly
        - arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy

  EKSNodeGroup:
    Type: AWS::EKS::Nodegroup
    DependsOn: EKSCluster
    Properties:
      ClusterName: !Ref ClusterName
      NodegroupName: v0
      NodeRole: !GetAtt NodeInstanceRole.Arn
      Subnets: !Ref SubnetIds
      ScalingConfig:
        DesiredSize: 1
        MinSize: 1
        MaxSize: 2
      InstanceTypes:
        - t3.medium
      AmiType: AL2023_x86_64_STANDARD
      CapacityType: ON_DEMAND
      DiskSize: 20

  VpcCniAddon:
    Type: AWS::EKS::Addon
    DependsOn: EKSCluster
    Properties:
      ClusterName: !Ref ClusterName
      AddonName: vpc-cni
      ResolveConflicts: OVERWRITE

  KubeProxyAddon:
    Type: AWS::EKS::Addon
    DependsOn: EKSCluster
    Properties:
      ClusterName: !Ref ClusterName
      AddonName: kube-proxy
      ResolveConflicts: OVERWRITE

  CoreDnsAddon:
    Type: AWS::EKS::Addon
    DependsOn: EKSCluster
    Properties:
      ClusterName: !Ref ClusterName
      AddonName: coredns
      ResolveConflicts: OVERWRITE

  UsrAccessEntry:
    Type: AWS::EKS::AccessEntry
    DependsOn: EKSCluster
    Properties:
      ClusterName: !Ref ClusterName
      PrincipalArn: !Ref PrincipalArn
      Username: syedzeeshan-admin
      AccessPolicies:
        - PolicyArn: arn:aws:eks::aws:cluster-access-policy/AmazonEKSClusterAdminPolicy
          AccessScope:
            Type: cluster
      Type: STANDARD
